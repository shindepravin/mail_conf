[general]
# General information.  See the fully annotated example more information
# https://github.com/jgoerzen/offlineimap/blob/master/offlineimap.conf

metadata = ~/.offlineimap
#accounts = ethz, gmail
accounts = ethz
maxsyncaccounts = 2
socktimeout = 60
ui = Basic

# This helper file lets you use gnome-keyring to store usernames / passwords
pythonfile = ~/.mail_config/lib/offlineimap-helper.py


[Account ethz]
localrepository = local-ethz
remoterepository = remote-ethz


# Call imapfilter before syncing
#presynchook = /usr/bin/imapfilter -vc ~/.mail_config/imapfilter/ethz.lua

[Repository local-ethz]
type = Maildir
localfolders = ~/.mail/ethz

#sep = .

sep = /

# Translate names from local names to remote names:
# This one does:
# 1. Capitalizes all the folder names
# 2. Changes any underscores to spaces
#                               re.sub ('_', ' ', foldername.capitalize()))
nametrans = lambda folder: re.sub('\s+', '',
                re.sub('myinbox', 'INBOX',
                folder))


[Repository remote-ethz]
type = IMAP
maxconnections = 2
remotehost = mail.ethz.ch
remoteusereval = get_username("mail.ethz.ch")
remotepasseval = get_password("mail.ethz.ch")

# This translates folder names such that everything (including your Inbox)
# appears in the same folder (named root).

#nametrans = lambda foldername: re.sub (' ', '_', foldername.lower())

# This translates folder names such that everything (including your Inbox)
# appears in the same folder (named root).
nametrans = lambda folder: re.sub('\s+', '',
                re.sub('.*Trash$', 'Trash',
                re.sub('.*Drafts$', 'Drafts',
                re.sub('.*Starred$', 'Starred',
                re.sub('.*All Mail$', 'Archive', folder)
                ))))

#                re.sub('(^.{1})', '.\\1',
#                re.sub('(.+)(\\.)(.+)', '\\1_\\3',
#                re.sub('INBOX', 'myinbox', folder)


#jfolderfilter = lambda folder: not re.search('(^bak.*|.*drafts$|.*deleted*|deletedItems*|DeletedItems*|myArchive*|.*spam$|.*sent$|.*trash$|.*Trash$|Trash$)', folder)
folderfilter = lambda folder: not re.search('(Junk|Deleted*|myArchive|^Trash$|SentItems|^Sent)', folder)
#folderfilter = lambda folder: folder not in ['Trash', 'myArchive', 'DeletedItems', 'deletedItems', 'Deleted Items']
postsynchook = notmuch new

[mbnames]
# Create a list of available mailboxes for mutt

enabled = yes

filename = ~/.mail_config/mutt/muttmailboxes
header = "mailboxes "

# Exclude these mailboxes from the above mailbox list
#folderfilter = lambda accountname, foldername: not re.search('(^bak.*|.*drafts$|.*deleted*|.*myarchive$|.*spam$|.*sent$|.*trash$|.*Trash$|Trash$)', foldername)
peritem = "+%(accountname)s/%(foldername)s"
#sep = "\\\n    "
sep = " "
footer = "\n"


####################################################################
####################################################################
####################################################################

[Account gmail]
localrepository = local-gmail
remoterepository = remote-gmail

[Repository local-gmail]
type = Maildir
localfolders = ~/.mail/gmail

# Note the nametrans below in remote-gmail: it undoes this one
# Translating names from local dir names into server names.
nametrans = lambda foldername: re.sub ('Inbox', 'INBOX',
                               re.sub ('Drafts', '[Gmail].Drafts',
                               re.sub ('Sent', '[Gmail].Sent Mail',
                               re.sub ('Flagged', 'Starred',
                               re.sub ('_', ' ', foldername.capitalize())))))


[Repository remote-gmail]
type = Gmail
maxconnections = 2
remotehost = imap.gmail.com
remoteusereval = get_username("imap.gmail.com")
remotepasseval = get_password("imap.gmail.com")
# If using ssl, you will need to specify certificates to use with them
ssl = yes
sslcacertfile = /path/to/cacertfile.crt
realdelete = no
# Note the nametrans above in local-gmail: it undoes this one
# Translating names from server names to names to used locally.
nametrans = lambda foldername: re.sub ('^\[gmail\]\/', '',
                               re.sub ('sent_mail', 'sent',
                               re.sub ('starred', 'flagged',
                               re.sub (' ', '_', foldername.lower()))))

# We don't want to sync all mail, it would pull everything again
folderfilter = lambda foldername: foldername not in ['[Gmail]/All Mail']

